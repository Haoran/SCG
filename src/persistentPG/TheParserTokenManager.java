/* Generated By:JavaCC: Do not edit this line. TheParserTokenManager.java */
package persistentPG;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import java.io.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import java.io.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import edu.neu.ccs.demeterf.lib.*;
import scg.*;
import scg.game.GamePlayer;
import scg.net.PasswordEntry;
import scg.net.PasswordFile;
import scg.net.PlayerSpec;
import scg.net.PlayersFile;
import scg.net.TeamFile;
import scg.net.TeamSpec;
import edu.neu.ccs.demeterf.Fields;
import edu.neu.ccs.demeterf.lib.ident;
import edu.neu.ccs.demeterf.lib.verbatim;

/** Token Manager. */
public class TheParserTokenManager implements TheParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10L) != 0L)
            return 13;
         if ((active0 & 0x3003fffffffffeaL) != 0L)
         {
            jjmatchedKind = 61;
            return 43;
         }
         return -1;
      case 1:
         if ((active0 & 0x3003ffffffffbeaL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
            return 43;
         }
         if ((active0 & 0x400L) != 0L)
            return 43;
         return -1;
      case 2:
         if ((active0 & 0x20000000080L) != 0L)
            return 43;
         if ((active0 & 0x3003dfffffffb6aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
            return 43;
         }
         return -1;
      case 3:
         if ((active0 & 0x100002000000020L) != 0L)
            return 43;
         if ((active0 & 0x2003ddffffffb4aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
            return 43;
         }
         return -1;
      case 4:
         if ((active0 & 0x200050000028040L) != 0L)
            return 43;
         if ((active0 & 0x18dffffd7b0aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
            return 43;
         }
         return -1;
      case 5:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x189ffffd6b0aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
            return 43;
         }
         if ((active0 & 0x1000L) != 0L)
            return 43;
         return -1;
      case 6:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x200004800L) != 0L)
            return 43;
         if ((active0 & 0x89dffdd230aL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 6;
            }
            return 43;
         }
         return -1;
      case 7:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x8000080300L) != 0L)
            return 43;
         if ((active0 & 0x81fffd5200aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 7;
            return 43;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x81fffd5200aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 8;
            return 43;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x81eff95200aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
            return 43;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x1eff85200aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 10;
            return 43;
         }
         return -1;
      case 11:
         if ((active0 & 0x1eff85200aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 11;
            return 43;
         }
         return -1;
      case 12:
         if ((active0 & 0x40000L) != 0L)
            return 43;
         if ((active0 & 0x1e3e81200aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 12;
            return 43;
         }
         return -1;
      case 13:
         if ((active0 & 0x1a2c81200aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 13;
            return 43;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000L) != 0L)
            return 43;
         if ((active0 & 0x1a2c81000aL) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 14;
            return 43;
         }
         return -1;
      case 15:
         if ((active0 & 0x10000L) != 0L)
            return 43;
         if ((active0 & 0x1a2c000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 15;
            return 43;
         }
         return -1;
      case 16:
         if ((active0 & 0x1a08000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 16;
            return 43;
         }
         return -1;
      case 17:
         if ((active0 & 0x1a00000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 17;
            return 43;
         }
         return -1;
      case 18:
         if ((active0 & 0x1a00000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 18;
            return 43;
         }
         return -1;
      case 19:
         if ((active0 & 0x1a00000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 19;
            return 43;
         }
         return -1;
      case 20:
         if ((active0 & 0x1a00000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 20;
            return 43;
         }
         return -1;
      case 21:
         if ((active0 & 0xa00000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 21;
            return 43;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 4, 13);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 93:
         return jjStopAtPos(0, 2);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200002000000020L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x808000100L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4d6000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1100000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1400L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x180200416808L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x24020080002L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000148200L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100200001800000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200100092000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x22002008000aL);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 43);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x444000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000040L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8008000100L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000a08280L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000200416820L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x3101000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2c0000000000L);
      case 98:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 43);
         break;
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 43);
         break;
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80002L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10008000040L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200002000008200L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100200000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x444000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8200416820L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20001000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1060008L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000100L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100004000800000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x92000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x110000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x48000000040L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x800060000L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 43);
         break;
      case 109:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4001000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000800L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200110000000008L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8412100L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20080202L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 91:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 43);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 43);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 43);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x80010000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8204008L);
      case 107:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x840000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x700412800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8c0000000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x24080202L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x28800002L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x412000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000004000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 43);
         break;
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80200L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400200100L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80c0100000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80004000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000808L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x101000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         break;
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 91:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(6, 44);
         break;
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x204000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100180000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000412200L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4001000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x2004000aL);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8010000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x300000000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0x800008L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 103:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 43);
         break;
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x420000002L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x412000L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40c0000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x12000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x12000000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x80008040000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x800008L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000002L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x1c0400000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x801000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(9, 22);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(9, 32);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0xc00012000L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4001000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x1020040002L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x16800008L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x8L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x2L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      case 91:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(10, 20);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(10, 43);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x1202000000L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10040000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0xc0000000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(10, 38);
         return jjMoveStringLiteralDfa11_0(active0, 0xc00000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 113:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x1040000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0xc0000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x808800000L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(12, 24);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(12, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(12, 31);
         break;
      case 80:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000008L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x1400002002L);
      case 103:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(12, 18, 43);
         break;
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x14000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(13, 25);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(13, 28);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(13, 34);
         break;
      case 77:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000008L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x800800000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000010002L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x28000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(14, 13, 43);
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000002L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(15, 23);
         break;
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L);
      case 91:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(15, 1);
         else if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(15, 3);
         break;
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(15, 16, 43);
         break;
      case 103:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000L);
      case 121:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(16, 26);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(16, 29);
         break;
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(17, 27);
         break;
      case 66:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000000L);
      case 100:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(21, 36);
         break;
      case 100:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000L);
      case 119:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(22, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(22, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 57;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  else if (curChar == 36)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(43);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 39)
                     jjAddStates(8, 9);
                  else if (curChar == 46)
                     jjCheckNAdd(13);
                  if (curChar == 45)
                     jjCheckNAdd(6);
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 46)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar == 39)
                     jjAddStates(8, 9);
                  break;
               case 18:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if (curChar == 39 && kind > 58)
                     kind = 58;
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 19);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 27:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 29:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 30:
                  if (curChar == 34 && kind > 59)
                     kind = 59;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 33:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 36:
                  jjCheckNAddStates(14, 16);
                  break;
               case 38:
                  jjCheckNAddStates(17, 19);
                  break;
               case 42:
                  if (curChar != 36)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(0, 2);
                  break;
               case 45:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 46:
                  if (curChar == 47)
                     jjCheckNAddStates(20, 22);
                  break;
               case 47:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 48:
               case 49:
                  if (curChar == 10 && kind > 54)
                     kind = 54;
                  break;
               case 50:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 52:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar == 42)
                     jjAddStates(23, 24);
                  break;
               case 54:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 53);
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 53);
                  break;
               case 56:
                  if (curChar == 47 && kind > 55)
                     kind = 55;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(43);
                  }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 3:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(4);
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(29, 31);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(32, 34);
                  break;
               case 29:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 35:
                  if (curChar == 123)
                     jjCheckNAddStates(14, 16);
                  break;
               case 36:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 37:
                  if (curChar == 125)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 39:
                  if (curChar == 125 && kind > 60)
                     kind = 60;
                  break;
               case 40:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 42:
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(43);
                  break;
               case 47:
                  jjAddStates(20, 22);
                  break;
               case 52:
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
               case 55:
                  jjCheckNAddTwoStates(55, 53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(20, 22);
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 6, 7, 46, 51, 27, 28, 30, 18, 20, 27, 28, 32, 30, 36, 37, 
   40, 37, 38, 40, 47, 48, 50, 54, 56, 10, 11, 15, 16, 21, 22, 24, 
   29, 31, 33, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\162\145\146\165\164\141\164\151\157\156\105\166\145\156\164\133", 
"\135", "\160\145\162\163\151\163\164\145\156\164\103\154\141\151\155\133", "\56", 
"\146\162\157\155", "\101\154\151\143\145", "\102\157\142", "\151\156\163\164\141\156\143\145", 
"\163\157\154\165\164\151\157\156", "\157\146", "\160\162\157\160\157\163\145", "\157\160\160\157\163\145", 
"\160\162\157\164\157\143\157\154\122\145\161\165\145\163\164", "\160\162\157\166\151\144\145", "\163\157\154\166\145", 
"\160\162\157\164\157\143\157\154\122\145\163\160\157\156\163\145", "\141\147\162\145\145", 
"\163\164\162\145\156\147\164\150\145\156\151\156\147", "\162\145\146\165\164\151\156\147", 
"\163\143\147\137\143\157\156\146\151\147\133", "\144\157\155\141\151\156\72", "\160\162\157\164\157\143\157\154\163\72", 
"\164\157\165\162\156\141\155\145\156\164\123\164\171\154\145\72", "\164\165\162\156\104\165\162\141\164\151\157\156\72", 
"\155\141\170\116\165\155\101\166\141\164\141\162\163\72", "\155\151\156\123\164\162\145\156\147\164\150\145\156\151\156\147\72", 
"\151\156\151\164\151\141\154\122\145\160\165\164\141\164\151\157\156\72", "\155\141\170\122\145\160\165\164\141\164\151\157\156\72", 
"\162\145\160\165\164\141\164\151\157\156\106\141\143\164\157\162\72", "\155\151\156\120\162\157\160\157\163\141\154\163\72", 
"\155\141\170\120\162\157\160\157\163\141\154\163\72", "\156\165\155\122\157\165\156\144\163\72", 
"\160\162\157\160\157\163\145\144\103\154\141\151\155\115\165\163\164\102\145\116\145\167\72", "\155\151\156\103\157\156\146\151\144\145\156\143\145\72", 
"\151\163\120\145\162\163\151\163\164\145\156\164\120\154\141\171\147\162\157\165\156\144\72", 
"\156\165\155\117\146\124\157\165\162\156\141\155\145\156\164\122\157\165\156\144\163\72", "\146\165\154\154", "\162\157\165\156\144\55\162\157\142\151\156", 
"\153\156\157\143\153\157\165\164", "\163\167\151\163\163", "\162\145\144", "\142\154\141\143\153", 
"\160\154\141\171\145\162\163\160\145\143\133", "\160\141\163\163\167\144\133", "\164\145\141\155\133", null, null, null, null, 
null, null, null, null, null, null, "\164\162\165\145", "\146\141\154\163\145", null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3f00ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xfe000000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[57];
private final int[] jjstateSet = new int[114];
protected char curChar;
/** Constructor. */
public TheParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TheParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 57; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
